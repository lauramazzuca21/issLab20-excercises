/*
 * robotboundary.qak
 * ANALYSIS MODEL
 */
System robotboundary 

Dispatch start   : start(ARG)
Dispatch stop    : stop(ARG)
Dispatch resume  : resume(ARG) 
Dispatch cmd     : cmd(MOVE)
Dispatch end     : end(ARG)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
 
Event collision    : collision( ARG )  
 
Context ctxrobotboundary ip [host="localhost" port=8018]  
Context ctxBasicrobot    ip [host="127.0.0.1" port=8020] 
  
ExternalQActor basicrobot context ctxBasicrobot 

QActor robotboundary context ctxrobotboundary  {   
[#
var NumStep      = 0
val StepTime     = 350
var StartTime    = 0L
var Workduration = 0L 
#] 

	State s0 initial { 	  
		println("robotboundary | START")	
		discardMsg Off  //WE MUST RECEIVE stop
		println("${mapRoomKotlin.mapUtil.refMapForTesting}")
		println("-----------------")
		run mapRoomKotlin.mapUtil.showMap()  //initial map empty  
		delay 2000  //just to look at the reference map and the current map
// 		forward robotboundary -m start : start(auto) 
		updateResource "initial"
	}	
	Transition t0 whenMsg start -> startWork 
 	
 	State startWork{	//just to store the StartTime
		memoCurrentTime StartTime	
  	}    
 	Goto work
 	
	State work{
		println("robotboundary | working ${NumStep}")
		//Activate the motors to go ahead
 		request basicrobot -m step : step( $StepTime  )
		updateResource "working" 
 	} 
	Transition t0 //whenMsg  stop      -> stopped  //to avoid the loss of synch with the grid
				  whenReply stepdone -> stepDone
				  whenReply stepfail -> stepFail
	
	State stepDone{ //change the map
	    //println("robotboundary | stepDone  ")
	    updateResource "stepDone"
		run mapRoomKotlin.mapUtil.doMove("w")
		run mapRoomKotlin.mapUtil.showMap()
		delay 500
	} 
	Transition t0 whenMsg  stop -> stopped   
	else Goto work
	
	State stepFail{
	    //println("robotboundary | stepFail  ")
		printCurrentMessage
		//change the map
		run mapRoomKotlin.mapUtil.doMove("h")
		[#
			NumStep++
			var Dt = 0L 			
		#]     
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# Dt = payloadArg(0).toLong()  #] 
			//println("robotboundary stepFail after: $Dt vs ${3*StepTime/4.0}")
			if [# Dt < 3*StepTime/4.0  #] {    
				forward basicrobot -m cmd : cmd( s )
				delayVar Dt
				forward basicrobot -m cmd : cmd( h )
			}	
			updateResource "stepFail"
			delay 1000		    
		}
		forward basicrobot -m cmd : cmd(l)
		delay 500
		//change the map
		run mapRoomKotlin.mapUtil.doMove("l")
	}
 	Transition t0 whenMsg  stop -> stopped   
	else Goto work if [# NumStep<4 #] else endWork 
  	
	State stopped{ 
		println("robotboundary | stopped")	
		updateResource "stopped"
	}
	Transition t0 whenMsg resume  -> work
 
	 
 	State endWork{
 		setDuration Workduration from StartTime
		println("robotboundary | ends; duration=$Workduration")
		updateResource "terminated"
		terminate 0
 	}
 
}

QActor sensorobserver context ctxrobotboundary  {    
	State s0 initial { 	  
		println("sensorobserver | working")	
	}
	Transition t0 whenEvent collision -> showCollision
	
	State showCollision{
		printCurrentMessage
	}
	Goto s0
}