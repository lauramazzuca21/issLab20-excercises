System basicrobot 
 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 
 
//mqttBroker "broker.hivemq.com" : 1883

Dispatch cmd       : cmd(MOVE)  
Dispatch end       : end(ARG)
 
Request  step      : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
  
Dispatch  collision  : collision( TARGET )
Event     collision  : collision( ARG ) 
//Event virtualobstacle  : virtualobstacle( OBJNAME )  //(for remove)
 
Event  endall	 : endall( ARG ) 
 
Context ctxbasicrobot ip [host="localhost" port=8020]  
/*  
 * CodedQActor that 'transforms' a cmd:cmd(X) into 
 * a command to the concrete robot specified in basicrobotConfig.json
 */
//CodedQActor robotadapter context ctxBasicrobot  className "unibo.robot.robotAdapterQa"	     
 
 
QActor basicrobot context ctxbasicrobot{
[#
  var StepTime      = 0L
  var StartTime     = 0L    
  var Duration      = 0L    
#]  
 	State s0 initial { 	
		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
		run unibo.robot.robotSupport.move( "l" )
		run unibo.robot.robotSupport.move( "r" )
 		updateResource "stopped"
 		discardMsg Off  //WE want receive any msg
 	}
	Goto work
	
	State work{ 
	} 
	Transition t1   whenMsg   collision   -> handleCollision
					whenMsg     cmd       -> execcmd
					whenRequest step      -> doStep
				  	whenMsg     end       -> endwork			  
	
	State handleCollision{
		//printCurrentMessage
		println("basicrobot | handleCollision")	
		onMsg( collision  : collision( TARGET ) ){
			updateResource "collision"
			emit collision : collision(obstacle)
		}
	}
	Goto work 

	State execcmd{
		//printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
			updateResource "move(${payloadArg(0)})"
  			//activate the motors 
			run unibo.robot.robotSupport.move( payloadArg(0 ) )
		}
	 }
	 Goto work  

   	State doStep{ 
 		//printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource "step(${StepTime})"
			println("basicrobot | doStep StepTime =$StepTime ")
 			run unibo.robot.robotSupport.move( "w" )
 			memoCurrentTime StartTime
		}  
	}  
	Transition t0 
		whenTimeVar StepTime      -> stepPerhapsDone	
		whenMsg  collision        -> stepFail		//Event??
//  	    whenEvent virtualobstacle -> stepFail	//Virtual : see smartrobot (subsumption)
 	
 	State stepPerhapsDone{
 		run unibo.robot.robotSupport.move( "h" )  //stop the robot
  		//println("basicrobot | stepPerhapsDone ")
 	}
 	Transition t0 whenTimeVar StepTime    -> stepDone  //StepTime is the worst case
 				  whenMsg collision       -> stepFailDetected
	
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the robot
		println("basicrobot | stepDone ")
		updateResource "stepDone"
   		replyTo step with stepdone : stepdone(ok)
  	}
	Goto work  
	
	State stepFailDetected{
		println("basicrobot | stepFailDetected near end of step ")
 		replyTo step with stepfail : stepfail($StepTime, obstacle)
    }
	Goto work 
	 
	State stepFail{ //REQUIREMENT req-onestep-time, req-onestep-info
		setDuration Duration from StartTime
 		updateResource "stepFail($Duration)"
		println("basicrobot | stepFail after $Duration ")
		emit collision : collision(obstacle)
 		replyTo step with stepfail : stepfail($Duration, obstacle)
    }
	Goto work 
	
	State endwork{ 
		onMsg( end : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource "move(end)"			
			run utils.virtualRobotSupportQak.terminatevr( )
		}
 		emit endall : endall(normal) 
 		terminate 1
	}
	   
}


 /*
QActor user context ctxbasicrobot{
	State s0 initial { 	
		run consolegui.consoleGui.create("basicrobot","tcp://broker.hivemq.com") //first char of class must be low
 	}
} 
*/ 