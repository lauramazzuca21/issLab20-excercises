/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("	LED init done.")
					}
					 transition(edgeName="t04",targetState="on",cond=whenRequest("cmdOn"))
					transition(edgeName="t05",targetState="off",cond=whenRequest("cmdOff"))
				}	 
				state("off") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmdOff(ARG)"), Term.createTerm("cmdOff(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val V = payloadArg(0)
								 				val Answer = "ackTo_${V}" 
								answer("cmdOff", "ack", "ack($Answer)"   )  
								println("led has sent ACK with Answer: $Answer")
						}
						println("led has been turned off")
					}
					 transition(edgeName="t06",targetState="on",cond=whenRequest("cmdOn"))
				}	 
				state("on") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmdOn(ARG)"), Term.createTerm("cmdOn(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val V = payloadArg(0)
								 				val Answer = "ackTo_${V}" 
								answer("cmdOn", "ack", "ack($Answer)"   )  
								println("led has sent ACK with Answer: $Answer")
						}
						println("led has been turned on")
					}
					 transition( edgeName="goto",targetState="blinkOn", cond=doswitch() )
				}	 
				state("blinkOn") { //this:State
					action { //it:State
						println("blink ON")
						delay(500) 
						forward("blink", "blink(off)" ,"led" ) 
					}
					 transition(edgeName="t07",targetState="off",cond=whenRequest("cmdOff"))
					transition(edgeName="t08",targetState="blinkOff",cond=whenDispatch("blink"))
				}	 
				state("blinkOff") { //this:State
					action { //it:State
						println("blink OFF")
						delay(500) 
						forward("blink", "blink(on)" ,"led" ) 
					}
					 transition(edgeName="t09",targetState="off",cond=whenRequest("cmdOff"))
					transition(edgeName="t010",targetState="blinkOn",cond=whenDispatch("blink"))
				}	 
			}
		}
}
