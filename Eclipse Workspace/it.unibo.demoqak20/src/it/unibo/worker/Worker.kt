/* Generated by AN DISI Unibo */ 
package it.unibo.worker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Worker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var Round = 1
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="workshift1", cond=doswitch() )
				}	 
				state("workshift1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(500) 
						stateTimer = TimerActor("timer_workshift1", 
							scope, context!!, "local_tout_worker_workshift1", 5.toLong() )
					}
					 transition(edgeName="t00",targetState="workshift2",cond=whenTimeout("local_tout_worker_workshift1"))   
					transition(edgeName="t01",targetState="workshift1",cond=whenDispatch("m1"))
				}	 
				state("workshift2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						delay(500) 
						stateTimer = TimerActor("timer_workshift2", 
							scope, context!!, "local_tout_worker_workshift2", 3.toLong() )
					}
					 transition(edgeName="t02",targetState="endJobDaily",cond=whenTimeout("local_tout_worker_workshift2"))   
					transition(edgeName="t03",targetState="workshift2",cond=whenDispatch("m2"))
				}	 
				state("endJobDaily") { //this:State
					action { //it:State
						println("worker endJobDaily")
					}
					 transition( edgeName="goto",targetState="workStillTodo", cond=doswitch() )
				}	 
				state("workStillTodo") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("m1(ARG)"), Term.createTerm("m1(A)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("worker workStillTodo: m1(${payloadArg(0)})")
						}
					}
					 transition(edgeName="t04",targetState="workStillTodo",cond=whenDispatch("m1"))
					transition( edgeName="goto",targetState="sleeping", cond=doswitch() )
				}	 
				state("sleeping") { //this:State
					action { //it:State
						println("worker sleeping ...")
					}
				}	 
			}
		}
}
