/* Generated by AN DISI Unibo */ 
package it.unibo.kb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Kb ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var CHAINCOUNTER = 1  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('prologUsage.pl')","") //set resVar	
						solve("consult('userKb.pl')","") //set resVar	
						solve("showSystemConfiguration","") //set resVar	
					}
					 transition( edgeName="goto",targetState="exampleElab", cond=doswitch() )
				}	 
				state("exampleElab") { //this:State
					action { //it:State
						println(" ------------ exampleElab  ------------ ")
						solve("assign(n,3)","") //set resVar	
						solve("inc(n,10,N1)","") //set resVar	
						solve("getVal(N1,V)","") //set resVar	
						 val solution = getCurSol("V")  
						println("V=${solution}")
					}
					 transition( edgeName="goto",targetState="exampleUnfiy", cond=doswitch() )
				}	 
				state("exampleUnfiy") { //this:State
					action { //it:State
						println(" ------------ exampleUnfiy  ------------ ")
						solve("unify(p(X,X),p(1,2))","") //set resVar	
						println(currentSolution)
						solve("unify(p(X,b(X)),p(1,Y))","") //set resVar	
						println(currentSolution)
						 val x = getCurSol("X") 
								   val y = getCurSol("Y") 
						if( currentSolution.isSuccess() ) {println("X=${x} Y=${y}")
						}
						else
						{}
					}
					 transition( edgeName="goto",targetState="exampleStart", cond=doswitch() )
				}	 
				state("exampleStart") { //this:State
					action { //it:State
						println(" ------------ exampleStart    ------------ ")
						solve("vertical(line(point(16,4),point(16,72)))","") //set resVar	
						println(currentSolution)
						solve("horizontal(line(point(1,1),point(2,Y)))","") //set resVar	
						 val y = getCurSol("Y")   
						if( currentSolution.isSuccess() ) {println("Y=${y}")
						}
						else
						{}
						println(".............................")
						solve("horizontalLine(point(1,5),P)","") //set resVar	
						 val P = getCurSol("P")   
						if( currentSolution.isSuccess() ) {println("P=${P} ")
						}
						else
						{}
						println(".............................")
						solve("allHLines(point(1,5),L)","") //set resVar	
						 val lines = getCurSol("L")   
						if( currentSolution.isSuccess() ) {println("all lines=${lines} ")
						}
						else
						{}
					}
					 transition( edgeName="goto",targetState="exampleKb1", cond=doswitch() )
				}	 
				state("exampleKb1") { //this:State
					action { //it:State
						println(" ------------ exampleKb1    ------------ ")
						solve("chain(N,LED)","") //set resVar	
						 val N   = getCurSol("N") 
								   val LED = getCurSol("LED") 
						println("N=${N} LED=${LED}")
						solve("getLedNames(LEDNAMES)","") //set resVar	
						 val lednamelist   = getCurSol("LEDNAMES")  
						println("lednamelist=$lednamelist")
					}
					 transition( edgeName="goto",targetState="exampleKb2Init", cond=doswitch() )
				}	 
				state("exampleKb2Init") { //this:State
					action { //it:State
						 CHAINCOUNTER=1  
						println(" ------------ INIT exampleKb2    ------------ ")
					}
					 transition( edgeName="goto",targetState="exampleKb2", cond=doswitch() )
				}	 
				state("exampleKb2") { //this:State
					action { //it:State
						solve("chain($CHAINCOUNTER,LED)","") //set resVar	
					}
					 transition( edgeName="goto",targetState="exampleKb2continue", cond=doswitchGuarded({ currentSolution.isSuccess()  
					}) )
					transition( edgeName="goto",targetState="exampleKb2end", cond=doswitchGuarded({! ( currentSolution.isSuccess()  
					) }) )
				}	 
				state("exampleKb2continue") { //this:State
					action { //it:State
						 val LED = getCurSol("LED")  
						println("LED=${LED}")
						 CHAINCOUNTER++  
					}
					 transition( edgeName="goto",targetState="exampleKb2", cond=doswitch() )
				}	 
				state("exampleKb2end") { //this:State
					action { //it:State
						println(" ------------ END exampleKb2    ------------ ")
					}
					 transition( edgeName="goto",targetState="exampleKb2Coded", cond=doswitch() )
				}	 
				state("exampleKb2Coded") { //this:State
					action { //it:State
						println(" ------------ exampleKb2Coded    ------------ ")
						   CHAINCOUNTER=1
								 do{
									solve( "chain($CHAINCOUNTER,LED)" )
						            if(currentSolution.isSuccess()){
										 val curLed = getCurSol("LED")
										 println( "LED=$curLed " )		//LED=...
										 CHAINCOUNTER++
									}
								 }while(currentSolution.isSuccess())			
					}
					 transition( edgeName="goto",targetState="exampleKb2PrologInit", cond=doswitch() )
				}	 
				state("exampleKb2PrologInit") { //this:State
					action { //it:State
						println(" ------------ INIT exampleKb2Prolog    ------------ ")
						solve("initStepCounter","") //set resVar	
					}
					 transition( edgeName="goto",targetState="exampleKb2Prolog", cond=doswitch() )
				}	 
				state("exampleKb2Prolog") { //this:State
					action { //it:State
						solve("getNextLedName(LEDNAME)","") //set resVar	
						if( currentSolution.isSuccess() ) { var curledname = getCurSol("LEDNAME")  
						println("curledname=$curledname")
						}
						else
						{println("no more leds")
						}
					}
					 transition( edgeName="goto",targetState="exampleKb2Prolog", cond=doswitchGuarded({ currentSolution.isSuccess()  
					}) )
					transition( edgeName="goto",targetState="endOfWork", cond=doswitchGuarded({! ( currentSolution.isSuccess()  
					) }) )
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						println(" ------------ BYE    ------------ ")
					}
				}	 
			}
		}
}
