/* Generated by AN DISI Unibo */ 
package it.unibo.abutton

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Abutton ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var on = false  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						forward("config", "config(ledgui)" ,"led" ) 
						resources.bls.kotlin.buttonEventEmitter.create(myself ,"clickOnOff" )
						forward("turnOff", "turnOff(ok)" ,"led" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
					}
					 transition(edgeName="t04",targetState="turnTheledOn",cond=whenEventGuarded("buttonCmd",{ ! on  
					}))
					transition(edgeName="t05",targetState="turnTheledOff",cond=whenEventGuarded("buttonCmd",{   on  
					}))
				}	 
				state("turnTheledOn") { //this:State
					action { //it:State
						 on = true  
						forward("turnOn", "turnOn(ok)" ,"led" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("turnTheledOff") { //this:State
					action { //it:State
						 on = false  
						forward("turnOff", "turnOff(ok)" ,"led" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
