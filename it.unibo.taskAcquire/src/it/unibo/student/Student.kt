/* Generated by AN DISI Unibo */ 
package it.unibo.student

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Student ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var StudentPrefix = "chiossi"
			val Badge         =  "0000763488"
			val Mail          =  "domenico.mezzapesa@i-tel.it"
			var counter       = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						 val StudentName = "$StudentPrefix${counter++}"   
						request("getmeatask", "getmeatask($StudentName,$Badge,$Mail)" ,"taskdeploy" )  
					}
				}	 
				state("waitAnswer") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="storetasktodo",cond=whenReply("tasktodo"))
				}	 
				state("storetasktodo") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tasktodo(NAME)"), Term.createTerm("tasktodo(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var Taskanme  = payloadArg(0)
								println("student | task= $Taskanme")
						}
					}
					 transition(edgeName="t01",targetState="storetasktodo",cond=whenReply("tasktodo"))
				}	 
			}
		}
}
