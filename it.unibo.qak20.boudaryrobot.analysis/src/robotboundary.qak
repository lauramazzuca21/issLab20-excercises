/*
 * boundaryrobot.qak
 * ANALYSIS MODEL
 */
System boundaryrobot 
  
Dispatch start   : start(ARG)
Dispatch stop    : stop(ARG)
Dispatch resume  : resume(ARG)

Event simulateobstacle    : simulateobstacle(ARG)
Event collision           : collision(TARGET,AVATAR)
 
Context ctxrobotboundary ip [host="localhost" port=8018]  
//CodedQActor obstaclesimulator context ctxrobotboundary  className "actors.simulator"	     

QActor robotboundary context ctxrobotboundary  {   
[# var NumStep=0 #]

	State s0 initial { 	
		println("boundaryrobot | START")	
		discardMsg On
	}	
	Goto waitcmd
	
	State waitcmd{
		println("boundaryrobot | waitcmd")	 
	}
	Transition t0 whenMsg start -> work 
 	   
	State work{
		println("boundaryrobot | working ${NumStep}")
		//TODO: Activate the motors to go ahead
		updateResource "moving" 
		
		//TOREMOVE: Generate collision event
		emit simulateobstacle : simulateobstacle(0)   
 	}
	Transition t0 whenMsg  stop       -> stopped 
				  whenEvent collision -> wall
 	
	State wall{
		[# NumStep++ #]
		println("boundaryrobot | handleCollision ${NumStep}")
		//TODO: Activate the motors to rotate
		updateResource "rotating" 
	}
	Goto work if [# NumStep<4 #] else endWork
   	
	State stopped{
		println("boundaryrobot | stopped")	
		updateResource "stopped"
	}
	Transition t0 whenMsg resume  -> work
 
	 
 	State endWork{
		println("boundaryrobot | ends")
		updateResource "terminated"
		terminate 0
 	}
 
}

/* 
QActor obstaclesimulator  context ctxrobotboundary{
	State s0 initial { 	
		println("obstaclesimulator | STARTS ")	
		discardMsg On
	}	
	Goto work 
	
	State work{		
	}
	Transition t0 whenEvent simulateobstacle -> simulate

	State simulate{
		delay 800
		println("obstaclesimulator | EMITS  ... ")	
		emit collision : collision(obstacle,false)
	}
	Goto work
	
}
*/